table(kese$rne =="NA" )
sum(is.na(kese$ose))
table(kese$ose =="NA" )
sum(is.na(kese$sjc))
table(kese$sjc =="NA" )
sum(is.na(kese$ssr))
table(kese$ssr =="NA" )
sum(is.na(kese$zindex))
table(kese$zindex =="NA" )
# Load the shiny app
library(shiny)
# Define ui
ui = fluidPage(
# Give the page a title
titlePanel("Kese"),
# Generate a sidebar
sidebarLayout(
# Define the sidebar with one input
sidebarPanel(
selectInput("column", "Index:",
choices=colnames(kese)),
hr(),
helpText("Select An index:"),
selectInput("column2", "Index:",
choices=colnames(kese)),
hr(),
helpText("Select Another index:"),
selectInput("yr", "Year:",
choices = c(kese$year)),
hr(),
helpText("Select A year:")
),
# Create a spot for the plot, which is not defined in this app.
mainPanel(
plotOutput("Plot")
)
)
)
# Define server logic required to produce a plot of the selected column data.
server<-function(input, output) {
output$Plot<-renderPlot({
ggplot(data = kese, aes_string(x=input$column2, y=input$column))+
geom_point(stat="identity", color = "blue")
})
}
# The call to the shinyApp function
shinyApp(ui = ui, server = server)
# The call to the shinyApp function
shinyApp(ui = ui, server = server)
mydata <- kese
### Data Structure Analysis
str(mydata)
names(mydata)
### Missing Data Analysis
anyNA(mydata)
### Changing blank string cells to NA values
mydata[mydata==""]<-NA
### The code used in the line below is adapted from code found at this link:
### https://stackoverflow.com/questions/20364450/find-names-of-columns-which-contain-missing-values
names(which(colSums(is.na(mydata)) > 0))
### Finding number of NAs in each column
sum(is.na(mydata))
sum(is.na(mydata$rne))
sum(is.na(mydata$ose))
sum(is.na(mydata$sjc))
sum(is.na(mydata$ssr))
sum(is.na(mydata$zindex))
sum(is.na(mydata$type))
sum(is.na(mydata$category))
# Load the shiny package
library(shiny)
library(plotly)
# Define UI for app
ui = fluidPage(
# App title
titlePanel("Shiny Visualizations of the Kauffman Entrepreneurship Indices"),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# Inputs:
selectInput("ycol", h3("Indicator"),
choices = names(mydata[, 6:10]), selected = "sjc"),
selectInput("year", h3("Year"),
choices = mydata$year, selected = "a")
),
# Main panel for displaying outputs
mainPanel(
# Output: Bar Chart
plotlyOutput(outputId = "plot")
)
)
)
# Define server logic required to draw plotly bar chart
server = function(input, output) {
selectedData <- reactive({
mydata[mydata$year == input$year & mydata$name != "United States",]
})
output$plot <- renderPlotly({
plot_ly(selectedData(), x = ~name, y = ~get(input$ycol), type= 'bar') %>%
layout(title = paste(input$ycol, "across the United States in", input$year), xaxis = list(title = "State"), yaxis = list(title = input$ycol))
})
}
# The call to the shinyApp function
shinyApp(ui = ui, server = server)
View(mydata)
# The call to the shinyApp function
shinyApp(ui = ui, server = server)
### The code used in the line below is adapted from code found at this link:
### https://stackoverflow.com/questions/20364450/find-names-of-columns-which-contain-missing-values
names(which(colSums(is.na(mydata)) > 0))
### The code used in the line below is adapted from code found at this link:
### https://stackoverflow.com/questions/20364450/find-names-of-columns-which-contain-missing-values
names(which(colSums(is.na(mydata)) > 0))
# Define UI for app
ui = fluidPage(
# App title
titlePanel("Shiny Visualizations of the Kauffman Entrepreneurship Indices"),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# Inputs:
selectInput("ycol", h3("Indicator"),
choices = names(mydata[, 6:10]), selected = "sjc"),
selectInput("year", h3("Year"),
choices = mydata$year, selected = "a")
),
# Main panel for displaying outputs
mainPanel(
# Output: Bar Chart
plotlyOutput(outputId = "plot")
)
)
)
# Define server logic required to draw plotly bar chart
server = function(input, output) {
selectedData <- reactive({
mydata[mydata$year == input$year & mydata$name != "United States",]
})
output$plot <- renderPlotly({
plot_ly(selectedData(), x = ~name, y = ~get(input$ycol), type= 'bar') %>%
layout(title = paste(input$ycol, "across the United States in", input$year), xaxis = list(title = "State"), yaxis = list(title = input$ycol))
})
}
# The call to the shinyApp function
shinyApp(ui = ui, server = server)
#loads in data
entrepreneur=read.csv("/Users/veochae/Downloads/KESE 2021.csv",na.strings = c(""))
#converts data columns into correct types
entrepreneur$fips=as.factor(entrepreneur$fips)
entrepreneur$name=as.factor(entrepreneur$name)
entrepreneur$type=as.factor(entrepreneur$type)
entrepreneur$category=as.factor(entrepreneur$category)
entrepreneur$year=as.factor(entrepreneur$year)
# Define UI for an app that draws a histogram
ui = fluidPage(
# App title
titlePanel("Kauffman Entrepreneurship Indices"),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
selectInput(inputId = "indicators", h3("Select indicators"),
choices = c("Rate of New Entrepenuers" = 6,
"Oppurtunity Share of New Entrepreneurs" = 7,
"Startup Early Job Creation" = 8,
"Startup Early Survival Rate" = 9,
"Kauffman Early-Stage Entrepreneurship Index"=10), selected = 1),
selectInput(inputId = "year", h3("Select Year"), choices = entrepreneur$year, selected = 1),
helpText("Created for QTM2623 - Professor Mathaisel using course notes and knowledge
4/20/22
Dataset found at https://indicators.kauffman.org/data-tables")),
# Main panel for displaying outputs
mainPanel(
# Output
plotlyOutput(outputId = "graph"),
helpText("note: no data avaiable for completely white states")
)
)
# Define UI for an app that draws a histogram
ui = fluidPage(
# App title
titlePanel("Kauffman Entrepreneurship Indices"),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
selectInput(inputId = "indicators", h3("Select indicators"),
choices = c("Rate of New Entrepenuers" = 6,
"Oppurtunity Share of New Entrepreneurs" = 7,
"Startup Early Job Creation" = 8,
"Startup Early Survival Rate" = 9,
"Kauffman Early-Stage Entrepreneurship Index"=10), selected = 1),
selectInput(inputId = "year", h3("Select Year"), choices = entrepreneur$year, selected = 1),
helpText("Created for QTM2623 - Professor Mathaisel using course notes and knowledge
4/20/22
Dataset found at https://indicators.kauffman.org/data-tables")),
# Main panel for displaying outputs
mainPanel(
# Output
plotlyOutput(outputId = "graph"),
helpText("note: no data avaiable for completely white states")
)
)
ui = fluidPage(
# App title
titlePanel("Kauffman Entrepreneurship Indices"),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
selectInput(inputId = "indicators", h3("Select indicators"),
choices = c("Rate of New Entrepenuers" = 6,
"Oppurtunity Share of New Entrepreneurs" = 7,
"Startup Early Job Creation" = 8,
"Startup Early Survival Rate" = 9,
"Kauffman Early-Stage Entrepreneurship Index"=10), selected = 1),
selectInput(inputId = "year", h3("Select Year"), choices = entrepreneur$year, selected = 1),
helpText("Created for QTM2623 - Professor Mathaisel using course notes and knowledge
4/20/22
Dataset found at https://indicators.kauffman.org/data-tables")),
# Main panel for displaying outputs
mainPanel(
# Output
plotlyOutput(outputId = "graph"),
helpText("note: no data avaiable for completely white states")
)
)
)
# Define server logic required to draw a histogram
server = function(input, output) {
# The output goes here
output$graph <- renderPlotly({
plot_ly(entrepreneur, type='choropleth',
locations=state.abb[match(entrepreneur$name[entrepreneur$year==input$year],state.name)],
z=entrepreneur[entrepreneur$year==input$year,as.integer(input$indicators)],
text=entrepreneur$name[entrepreneur$year==input$year], colorscale="Reds",
locationmode='USA-states') %>% layout(geo=list(scope="usa"))%>%
layout(title = paste( c("Rate of New Entrepenuers",
"Oppurtunity Share of New Entrepreneurs",
"Startup Early Job Creation",
"Startup Early Survival Rate",
"Kauffman Early-Stage Entrepreneurship Index")[as.integer(input$indicators)-5], "in", input$year))
})
}
# The call to the shinyApp function
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
library('tidyverse')
library(rstudioapi)
library(plyr)
library(readr)
library(stringr)
library(hash)
#mark current directory
cur_dir = dirname(getSourceEditorContext()$path)
#set directory to data folder
setwd("../data")
#load file names from teh data folder
myfiles = list.files(path=getwd(), pattern="*.csv", full.names=TRUE)
name_list = basename(myfiles)
name_list = gsub(".csv","",name_list)
d <- hash()
for(i in c(1,length(name_list))){
d[[name_list[i]]] <- read.csv(myfiles[i])
}
#set directory to data folder
setwd("../data")
#load file names from teh data folder
myfiles = list.files(path=getwd(), pattern="*.csv", full.names=TRUE)
getwd()
#mark current directory
cur_dir = dirname(getSourceEditorContext()$path)
#set directory to data folder
setwd(cur_dir)
setwd("../data")
getwd()
#load file names from teh data folder
myfiles = list.files(path=getwd(), pattern="*.csv", full.names=TRUE)
name_list = basename(myfiles)
name_list = gsub(".csv","",name_list)
d <- hash()
View(d)
for(i in c(1,length(name_list))){
d[[name_list[i]]] <- read.csv(myfiles[i])
}
View(d)
View(d)
#mark current directory
cur_dir = dirname(getSourceEditorContext()$path)
#set directory to data folder
setwd(cur_dir)
setwd("../data")
getwd()
#load file names from teh data folder
myfiles = list.files(path=getwd(), pattern="*.csv", full.names=TRUE)
name_list = basename(myfiles)
name_list = gsub(".csv","",name_list)
d <- for(i in c(1,length(name_list))){
d[[name_list[i]]] <- read.csv(myfiles[i])
}
namelist[[1]]
name_list[[1]]
name_list[[1]] = read.csv(myfiles[1])
#file load
accounts <- read.csv("accounts.csv")
cards <- read.csv("cards.csv")
clients <- read.csv("clients.csv")
districts <- read.csv("districts.csv")
links <- read.csv("links.csv")
loans <- read.csv("loans.csv")
payment_orders <- read.csv("payment_orders.csv")
transactions <- read.csv("transactions.csv")
#checking for missing values
colSums(loans)
#checking for missing values
colSums(is.na(loans))
str(loans)
loans$date = as.Date(loans$date)
str(loans)
col_title = col_title + "sd"
col_title = c('24_A', '12_B',
'12_A', '60_D', '48_C', '36_D', '36_C', '12_C', '48_A', '24_C', '60_C',
'24_B', '48_D', '24_D', '48_B', '36_A', '36_B', '60_B', '12_D', '60_A')
col_title = col_title + "sd"
col_title[21] = sd
col_title[21] = "sd"
col_title = c('24_A', '12_B',
'12_A', '60_D', '48_C', '36_D', '36_C', '12_C', '48_A', '24_C', '60_C',
'24_B', '48_D', '24_D', '48_B', '36_A', '36_B', '60_B', '12_D', '60_A')
x = ()
x = ""
strsplit(col_title[1], "_")
strsplit(col_title[1], "_")[1]
strsplit(col_title[1], "_")[1][1]
strsplit(col_title[1], "_")[[1]]
strsplit(col_title[1], "_")[1,]
strsplit(col_title[1], "_")[1,0]
strsplit(col_title[1], "_")[0]
x = strsplit(col_title[1], "_")[0]
x = strsplit(col_title[1], "_")
View(x)
x[[1]][1]
strsplit(col_title[1], "_")[[1]][1]
x = ""
y = ""
for(i in c(1,length(col_title))){
x[i] = strsplit(col_title[i], "_")[[1]][1]
y[i] = strsplit(col_title[y], "_")[[1]][2]
}
for(i in c(1,length(col_title))){
x[i] = strsplit(col_title[i], "_")[[1]][1]
y[i] = strsplit(col_title[i], "_")[[1]][2]
}
for(i in c(1:length(col_title))){
x[i] = strsplit(col_title[i], "_")[[1]][1]
y[i] = strsplit(col_title[i], "_")[[1]][2]
}
for(i in c(1:nrow(loans))){
for(j in c(5:length(col_title))){
if(loans[i,col_title] == "X"){
loans$loan_length = x[j]
loans$loan_status = y[j]
}
}
}
for(i in c(1:nrow(loans))){
for(j in c(5:length(col_title))){
if(loans[i,col_title[j]] == "X"){
loans$loan_length = x[j]
loans$loan_status = y[j]
}
}
}
for(i in c(1:nrow(loans))){
for(j in c(1:length(col_title))){
if(loans[i,col_title[j]] == "X"){
loans$loan_length = x[j]
loans$loan_status = y[j]
}
}
}
length(col_title)
loans[1,'24_A']
loans[1,"24_A"]
loans[,"24_A"]
loans[,loans$"24_A"]
colnames(loans)
gsub("X", "", col_title)
col_title
#extract column titles of uncleaned data
col_title = c("X24_A"   ,   "X12_B"    ,  "X12_A"    ,  "X60_D"    ,  "X48_C"  ,    "X36_D"  ,
"X36_C"   ,   "X12_C"    ,  "X48_A"  ,    "X24_C"   ,   "X60_C"  ,    "X24_B"   ,   "X48_D"  ,    "X24_D"   ,   "X48_B"    ,  "X36_A"  ,    "X36_B" ,
"X60_B"    ,  "X12_D"   ,   "X60_A"     )
#split the loan status column titles for cleaning =
x = ""
y = ""
#Erase "X" infront of column titles
temp = gsub("X", "", col_title)
for(i in c(1:length(temp))){
x[i] = strsplit(temp[i], "_")[[1]][1]
y[i] = strsplit(temp[i], "_")[[1]][2]
}
for(i in c(1:nrow(loans))){
for(j in c(1:length(col_title))){
if(loans[i,col_title[j]] == "X"){
loans$loan_length = x[j]
loans$loan_status = y[j]
}
}
}
View(loans)
for(i in c(1:nrow(loans))){
for(j in c(1:length(col_title))){
if(loans[i,col_title[j]] == "X"){
loans$loan_length[i] = x[j]
loans$loan_status[i] = y[j]
}
}
}
View(loans)
loans[,5:25] = NULL
loans
cur_dir = dirname(getSourceEditorContext()$path)
#set directory to data folder
setwd(cur_dir)
setwd("../data")
#file load
districts <- read.csv("districts.csv")
loans <- read.csv("loans.csv")
#changing date column to fit date format
loans$date = as.Date(loans$date)
#extract column titles of uncleaned data
col_title = c("X24_A"   ,   "X12_B"    ,  "X12_A"    ,  "X60_D"    ,  "X48_C"  ,    "X36_D"  ,
"X36_C"   ,   "X12_C"    ,  "X48_A"  ,    "X24_C"   ,   "X60_C"  ,    "X24_B"   ,   "X48_D"  ,    "X24_D"   ,   "X48_B"    ,  "X36_A"  ,    "X36_B" ,
"X60_B"    ,  "X12_D"   ,   "X60_A"     )
#split the loan status column titles for cleaning =
x = ""
y = ""
#Erase "X" infront of column titles
temp = gsub("X", "", col_title)
for(i in c(1:length(temp))){
x[i] = strsplit(temp[i], "_")[[1]][1]
y[i] = strsplit(temp[i], "_")[[1]][2]
}
for(i in c(1:nrow(loans))){
for(j in c(1:length(col_title))){
if(loans[i,col_title[j]] == "X"){
loans$loan_length[i] = x[j]
loans$loan_status[i] = y[j]
}
}
}
loans[,6:25] = NULL
loans
write.csv(loans, file = "loans.csv")
getwd()
write.csv(loans, file = "../codes-and-outputs/loans.csv")
transactions
districts
districts$commited_crimes[1]
str(districts)
districts$commited_crimes = gsub("[", "", districts$commited_crimes)
districts$commited_crimes = gsub("\\[", "", districts$commited_crimes)
districts$commited_crimes
districts
str(districts)
districts$commited_crimes = gsub("\\[", "", districts$commited_crimes)
districts$commited_crimes = gsub("\\]", "", districts$commited_crimes)
districts$municipality_info = gsub("\\[", "", districts$municipality_info)
districts$municipality_info = gsub("\\]", "", districts$municipality_info)
districts$unemployment_rate = gsub("\\[", "", districts$unemployment_rate)
districts$unemployment_rate = gsub("\\]", "", districts$unemployment_rate)
str(districts)
for(i in c(1:nrow(districts))){
x = strsplit(districts[i,"municipality_info"], ",")
districts[i,'pop500'] = x[[1]][1]
districts[i,'pop500_1999'] = x[[1]][2]
districts[i,'pop2000_9999'] = x[[1]][3]
districts[i,'pop10000'] = x[[1]][4]
}
str(district)
str(districts)
for(i in c(1:nrow(districts))){
x = strsplit(districts[i,"commited_crimes"], ",")
districts[i,'crime95'] = x[[1]][1]
districts[i,'crime96'] = x[[1]][2]
}
for(i in c(1:nrow(districts))){
x = strsplit(districts[i,"unemployment_rate"], ",")
districts[i,'unemployment95'] = x[[1]][1]
districts[i,'unemployment96'] = x[[1]][2]
}
str(districts)
districts[,9:11] = NULL
str(districts)
districts[,10:17] <- as.numeric(districts[,10:17])
districts[,9:16] <- as.numeric(districts[,9:16])
districts[,9:16] <- as.integer(districts[,9:16])
districts[,9] <- as.numeric(districts[,9])
for(i in c(9:16)){
districts[,i] <- as.numeric(districts[,i])
}
districts
colSums(is.na(districts))
districts[is.na(districts$unemployment95),]
View(districts)
districts[is.na(districts$unemployment95),"crime95"] <- mean(districts$crime95)
districts[is.na(districts$unemployment95),"crime95"]
districts[is.na(districts$unemployment95),"crime95"] <- mean(districts$crime95, na.rm = T)
